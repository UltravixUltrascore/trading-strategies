from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import JWTManager, create_access_token, jwt_required
from werkzeug.security import generate_password_hash, check_password_hash
import datetime

app = Flask(__name__)

# Configurazione del database (usiamo SQLite per semplicit√†)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JWT_SECRET_KEY'] = 'super-secret'  # Chiave segreta per JWT

db = SQLAlchemy(app)
jwt = JWTManager(app)

# Modello User per il database
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)

# Creazione del database
@app.before_first_request
def create_tables():
    db.create_all()

# Endpoint di registrazione
@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    hashed_password = generate_password_hash(data['password'], method='bcrypt')
    
    new_user = User(username=data['username'], password=hashed_password)
    db.session.add(new_user)
    db.session.commit()
    
    return jsonify({"message": "User created successfully!"}), 201

# Endpoint di login
@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    user = User.query.filter_by(username=data['username']).first()
    
    if user and check_password_hash(user.password, data['password']):
        # Creazione del token JWT con una scadenza
        token = create_access_token(identity={'username': user.username}, expires_delta=datetime.timedelta(minutes=30))
        return jsonify({'token': token}), 200
    else:
        return jsonify({"message": "Invalid credentials"}), 401

# Endpoint protetto (solo accessibile con un token valido)
@app.route('/protected', methods=['GET'])
@jwt_required()
def protected():
    return jsonify({"message": "This is a protected route"})

if __name__ == '__main__':
    app.run(debug=True)
